AWSTemplateFormatVersion: "2010-09-09"
Description: Template for creating ECS
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
Resources:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "public-route-table"
  
  PrivateRouteTableEC2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "private-ec2-route-table"

  PrivateRouteTableAssocitationApp1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableEC2
      SubnetId: !Ref AppSubnet1

  PrivateRouteTableAssocitationApp2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableEC2
      SubnetId: !Ref AppSubnet2

  PrivateRouteTableAssocitationApp3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableEC2
      SubnetId: !Ref AppSubnet3

  PublicSubnet1RouteTableAssocitiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubAppSubnet1

  PublicSubnet2RouteTableAssocitiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubAppSubnet2
  
  PublicSubnet3RouteTableAssocitiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubAppSubnet3

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEC2
      DestinationCidrBlock: 0.0.0.0/0    
      NatGatewayId: !Ref NatGateway
  
  Route:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: "Name"
        Value: internet-gateway-demo

  # attach vpc with internet gateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PubAppSubnet1

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "nlb-wiki"
      Scheme: internet-facing
      SubnetMappings:
        - SubnetId: !Ref PubAppSubnet1
        - SubnetId: !Ref PubAppSubnet2
        - SubnetId: !Ref PubAppSubnet3
      Type: network
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: 80
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      TargetType: instance
      Port: 80
      Protocol: TCP
  
  NetworkLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: "Name"
          Value: "demo-vpc"

  PubAppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.21.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "pub-subnet-1"

  PubAppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.22.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "pub-subnet-2"

  PubAppSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2c
      CidrBlock: 10.0.23.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "pub-subnet-3"

  AppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.24.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "app-subnet-1"

  AppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.25.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "app-subnet-2"

  AppSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2c
      CidrBlock: 10.0.26.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "app-subnet-3"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.27.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "private-subnet-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.28.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "private-subnet-2"

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2c
      CidrBlock: 10.0.29.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "private-subnet-3"
  
  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Group of database private subnet
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags:
        - Key: "Name"
          Value: "db-security-group"
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EC2
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "ec2-security-group"
  
  SecurityGroupHTTPInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: TCP
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
  
  SecurityGroupSSHinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: TCP
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: IamInstanceProfile
      Path: "/"
      Roles:
      - ecsInstanceRole

###################################################################
# AUTOSCALE SECTION
###################################################################

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: auto-scale-group-template
      LaunchTemplateData:
        ImageId: ami-014b01f8aa1a38b78
        InstanceType: t2.micro
        IamInstanceProfile:
          Arn: !GetAtt
            - IamInstanceProfile
            - Arn
        SecurityGroupIds: 
          - !Ref SecurityGroup
        UserData:
          "Fn::Base64": |
              #!/bin/bash
              echo ECS_CLUSTER=Cluster >> /etc/ecs/ecs.config

  AutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref AppSubnet1
        - !Ref AppSubnet2
        - !Ref AppSubnet3
      MaxSize: 4
      MinSize: 1
      TargetGroupARNs: 
        - !Ref TargetGroup
      DesiredCapacity: 1
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber

###################################################################
# CLUSTER SECTION
###################################################################

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "Cluster"

  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties: 
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AutoScaleGroup
        ManagedScaling:
          InstanceWarmupPeriod: 60
          MaximumScalingStepSize: 1
          MinimumScalingStepSize: 1
          Status: ENABLED
          TargetCapacity: 50
      Name: "CapacityProvider"
  
  ClusterCPAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviders:
        - !Ref CapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref CapacityProvider
          Base: 0
          Weight: 1 
  
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "EC2"
      Cpu: 900
      Memory: 900
      ExecutionRoleArn: 'ecsTaskExecutionRole'
      TaskRoleArn: 'ecsTaskExecutionRole'
      NetworkMode: 'bridge'
      ContainerDefinitions:
        - Name: wiki
          Image: mediawiki:latest
          Memory: 128
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80

  ECSDemoService: 
    Type: AWS::ECS::Service
    DependsOn: NetworkLoadBalancerListener
    Properties:
      ServiceName: ecs-service 
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      SchedulingStrategy: REPLICA
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      HealthCheckGracePeriodSeconds: 120
      CapacityProviderStrategy:
        - CapacityProvider: !Ref CapacityProvider
          Base: 0
          Weight: 1
      LoadBalancers:
        - ContainerName: 'wiki'
          TargetGroupArn: !Ref TargetGroup
          ContainerPort: 80
      TaskDefinition: !Ref ECSTaskDefinition
  
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSDemoService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      RoleARN: 
        Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ServiceNamespace: ecs
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId: !Join
        - /
        - - service
          - !Ref ECSCluster
          - !GetAtt ECSDemoService.Name

  ServiceScalingPolicyALB:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: cpu-utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50
        ScaleInCooldown: 30
        ScaleOutCooldown: 30
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization 