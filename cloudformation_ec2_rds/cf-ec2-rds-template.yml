AWSTemplateFormatVersion: "2010-09-09"
Description: Template for creating EC2 Instance
# parameter for existing key pairs
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

# resources section
Resources:
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "nlb-wiki"
      Scheme: internet-facing
      SubnetMappings:
        - SubnetId: !Ref AppSubnet
      Type: network

  # target group network load balancer
  NetworkLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "nlb-target"
      Port: 80
      Protocol: TCP
      VpcId: !Ref EC2VPC
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: 80
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      TargetType: instance
      Targets:
        - Id: !Ref EC2Instance
          Port: 80

  # network load balancer
  NetworkLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP

  # ec2 instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-west-2a
      ImageId: ami-0d70546e43a941d70
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref AppSubnet1
      KeyName: !Ref KeyName
      UserData:
        "Fn::Base64": |
            #!/bin/bash
            
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"

            sudo apt-get update
            sudo apt-get install -y docker-ce
            sudo usermod -aG docker ubuntu
            sudo apt-get update
  
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo apt-get update
            cd /home/ubuntu/
            mkdir -p wiki
            cd wiki
            
            cat << EOF > docker-compose.yml
              version: '3'
              services:
                mediawiki:
                  image: mediawiki
                  restart: always
                  ports:
                    - 80:80
                  environment: 
                      DB_HOST: db
                      DB_PORT: 3306
                      DB_DATABASE: mediawiki
                      DB_USERNAME: root
                      DB_PASSWORD: secret
                  volumes:
                    - ./images:/var/www/html/images
                  networks:
                      - mediawiki
              networks:
                mediawiki:
            EOF
            sudo docker-compose -f /home/ubuntu/wiki/docker-compose.yml up -d

  # rds instance 
  RDSCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      DBSubnetGroupName: !Ref SubnetGroup
      MasterUsername: "admin"
      MasterUserPassword: "SRmdwvPkfa9VeFQk3qUjsKW"
      DatabaseName: mediawiki
      Engine: "aurora-mysql"
      EngineMode: "global"
      Port: 3306
      VpcSecurityGroupIds: 
      - !Ref DBSecurityGroup

  # first db instance of cluster
  DBInstance1:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: aurora-mysql
      DBClusterIdentifier: !Ref RDSCluster
      PubliclyAccessible: 'false'
      DBInstanceClass: db.t3.small
      DBSubnetGroupName: !Ref SubnetGroup

  # second db instance of cluster
  DBInstance2:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: aurora-mysql
      DBClusterIdentifier: !Ref RDSCluster
      PubliclyAccessible: 'false'
      DBInstanceClass: db.t3.small
      DBSubnetGroupName: !Ref SubnetGroup

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'DB security group'
      GroupName: 'DB Security Group'
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref EC2SecurityGroup
          IpProtocol: TCP
          FromPort: 3306
          ToPort: 3306
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: -1 # Allow all
      Tags:
        - Key: 'Name'
          Value: 'DB-Security-Group'
      VpcId: !Ref EC2VPC

  # ec2 security group
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EC2 Security group 
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "Name"
          Value: "ec2-security-group"

  # inbound http
  Ec2SecurityGroupHTTPinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: TCP
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  # inbound ssh
  Ec2SecurityGroupSSHinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: TCP
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  # vpc
  EC2VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: "Name"
          Value: "demo-vpc"

  # route table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "Name"
          Value: "public-route-table"

  PrivateRouteTableEC2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "Name"
          Value: "private-ec2-route-table"

  PrivateRouteTableDB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "Name"
          Value: "private-db-route-table"

  # route
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEC2
      DestinationCidrBlock: 0.0.0.0/0    
      NatGatewayId: !Ref NatGateway

  Route:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
  
  PrivateRouteTableAssocitationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableDB
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTableAssocitationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableDB
      SubnetId: !Ref PrivateSubnet2

  PrivateRouteTableAssocitationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableDB
      SubnetId: !Ref PrivateSubnet3

  # subnet association 
  PrivateSubnetRouteTableAssocitation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableEC2
      SubnetId: !Ref AppSubnet1

  PublicSubnetRouteTableAssocitiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref AppSubnet

  # subnet
  AppSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.23.0/24
      VpcId: !Ref EC2VPC
      Tags: 
      - Key: "Name"
        Value: app-subnet-public

  AppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.24.0/24
      VpcId: !Ref EC2VPC
      # MapPublicIpOnLaunch: True
      Tags: 
      - Key: "Name"
        Value: app-subnet-1

  AppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.25.0/24
      VpcId: !Ref EC2VPC
      Tags:
      - Key: "Name"
        Value: app-subnet-2

  AppSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2c
      CidrBlock: 10.0.26.0/24
      VpcId: !Ref EC2VPC
      Tags:
      - Key: "Name"
        Value: app-subnet-3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.27.0/24
      VpcId: !Ref EC2VPC
      MapPublicIpOnLaunch: True
      Tags: 
      - Key: "Name"
        Value: private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.28.0/24
      VpcId: !Ref EC2VPC
      Tags:
      - Key: "Name"
        Value: private-subnet-2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2c
      CidrBlock: 10.0.29.0/24
      VpcId: !Ref EC2VPC
      Tags:
      - Key: "Name"
        Value: private-subnet-3

  # private subnet group
  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Group of private subnet
      DBSubnetGroupName: subnet-group
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags: 
        - Key: "Name"
          Value: "db-group-subnet"

  # internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: "Name"
        Value: internet-gateway-demo

  # attach vpc with internet gateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref EC2VPC

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref AppSubnet

Outputs:
  NetworkLoadBalancerOutput:
    Description: "Network Loadbalancer output."
    Value: !GetAtt NetworkLoadBalancer.DNSName
  


